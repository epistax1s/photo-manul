package photo

import (
	"bytes"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/epistax1s/photo-manul/internal/log"
	. "github.com/epistax1s/photo-manul/internal/statemachine/core"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (state *PhotoState) Init(update *tgbotapi.Update) {
	manul := state.server.Manul
	chatID := update.FromChat().ID

	employee := state.context.Employee

	msg := fmt.Sprintf("üë®üèª‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫:\n\n"+
		"ID = %d\n"+
		"–§–ò–û = %s\n", employee.EmployeeID, employee.EmployeeName)

	manul.SendMessage(chatID, msg)
	manul.SendMessage(chatID, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ üì∏")
}

func (state *PhotoState) Handle(update *tgbotapi.Update) {
	manul := state.server.Manul
	employeeService := state.server.EmployeeService

	chatID := update.FromChat().ID

	employee := state.context.Employee

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞
	var fileID string
	if update.Message != nil {
		if len(update.Message.Photo) > 0 {
			// –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –±–æ–ª—å—à—É—é) –≤–µ—Ä—Å–∏—é
			photo := update.Message.Photo[len(update.Message.Photo)-1]
			fileID = photo.FileID
		} else if update.Message.Document != nil {
			// –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –±–µ—Ä—ë–º –µ–≥–æ fileID
			fileID = update.Message.Document.FileID
		} else {
			manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG (JPG) (–º–æ–∂–Ω–æ —Ñ–∞–π–ª–æ–º) üö®")
			return
		}
	} else {
		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG (JPG) (–º–æ–∂–Ω–æ —Ñ–∞–π–ª–æ–º) üö®")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π URL
	url, err := manul.GetFileDirectURL(fileID)
	if err != nil {
		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞ ü§ï")
		return
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	resp, err := http.Get(url)
	if err != nil {
		log.Error("Downloading a file", "url", url, "err", err)

		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ü§ï")
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		log.Error("Downloading a file", "url", url, "code", resp.StatusCode)

		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ü§ï")
		return
	}

	// –ß–∏—Ç–∞–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±—É—Ñ–µ—Ä
	data, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Error("Error reading response body", "err", err)
		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ü§ï")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
	if !state.validatePhoto(data, url, chatID) {
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
	uniqueFileName := employee.EmployeeName

	uniqueFileName = removeSpaces(uniqueFileName)
	uniqueFileName = transliterate(uniqueFileName)
	uniqueFileName = uniqueFileName + strconv.FormatInt(employee.EmployeeID, 10)
	uniqueFileName = uniqueFileName + ".jpg"

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	if err := state.savePhoto(uniqueFileName, data, chatID); err != nil {
		return
	}

	employee.ImagePath = uniqueFileName

	if err := employeeService.UpdateEmployee(employee); err != nil {
		log.Error("Error when trying to update an employee in the database", "employee", employee, "err", err)

		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ü§ï")
		return
	}

	manul.SendMessage(chatID, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚úÖ")

	state.stateMachine.
		Set(Idle, chatID, &StateContext{}).
		Init(update)
}

func (state *PhotoState) validatePhoto(data []byte, url string, chatID int64) bool {
	manul := state.server.Manul

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ URL
	extension := filepath.Ext(url)

	log.Debug("validatePhoto", "url", url, "extension", extension)

	if extension == "" {
		log.Error("No file extension found", "url", url)

		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: —Å —Ñ–∞–π–ª–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ü§ï")
		return false
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	lowerExt := strings.ToLower(extension)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg –∏–ª–∏ .jpeg
	if lowerExt != ".jpg" && lowerExt != ".jpeg" {
		log.Error("Incorrect file extension", "url", url, "extension", extension)

		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg –∏–ª–∏ .jpeg ü§ì")
		return false
	}

	// –¢–µ–ø–µ—Ä—å –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ –º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–∞–º (–ø–µ—Ä–≤—ã–µ 2 –±–∞–π—Ç–∞)
	if len(data) < 2 {
		log.Error("File too small", "url", url)
		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPEG ü§ì")
		return false
	}
	isJPEG := bytes.Equal(data[:2], []byte{0xFF, 0xD8})
	log.Debug("validatePhoto", "url", url, "isJPEG", isJPEG)
	if !isJPEG {
		log.Error("Incorrect file format", "url", url, "first_bytes", data[:2])
		manul.SendMessage(chatID, "–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPEG ü§ì")
		return false
	}

	return true
}

func (state *PhotoState) savePhoto(uniqueFileName string, data []byte, chatID int64) error {
	manul := state.server.Manul

	saveDir := "/app/photos/"
	savePath := filepath.Join(saveDir, uniqueFileName)

	// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	if _, err := os.Stat(saveDir); os.IsNotExist(err) {
		if err := os.MkdirAll(saveDir, 0755); err != nil {
			log.Error("Error when creating a directory", "err", err)

			manul.SendMessage(chatID, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ü§ï")
			return err
		}
	}

	// –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
	err := os.WriteFile(savePath, data, 0644)
	if err != nil {
		log.Error("Error when saving a file", "err", err)
		manul.SendMessage(chatID, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª ü§ï")
		return err
	}

	return nil
}

// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
var cyrToLat = map[rune]string{
	'–∞': "a",
	'–±': "b",
	'–≤': "v",
	'–≥': "g",
	'–¥': "d",
	'–µ': "e",
	'—ë': "yo",
	'–∂': "zh",
	'–∑': "z",
	'–∏': "i",
	'–π': "y",
	'–∫': "k",
	'–ª': "l",
	'–º': "m",
	'–Ω': "n",
	'–æ': "o",
	'–ø': "p",
	'—Ä': "r",
	'—Å': "s",
	'—Ç': "t",
	'—É': "u",
	'—Ñ': "f",
	'—Ö': "kh",
	'—Ü': "ts",
	'—á': "ch",
	'—à': "sh",
	'—â': "sch",
	'—ä': "",
	'—ã': "y",
	'—å': "",
	'—ç': "e",
	'—é': "yu",
	'—è': "ya",
	'–ê': "A",
	'–ë': "B",
	'–í': "V",
	'–ì': "G",
	'–î': "D",
	'–ï': "E",
	'–Å': "Yo",
	'–ñ': "Zh",
	'–ó': "Z",
	'–ò': "I",
	'–ô': "Y",
	'–ö': "K",
	'–õ': "L",
	'–ú': "M",
	'–ù': "N",
	'–û': "O",
	'–ü': "P",
	'–†': "R",
	'–°': "S",
	'–¢': "T",
	'–£': "U",
	'–§': "F",
	'–•': "Kh",
	'–¶': "Ts",
	'–ß': "Ch",
	'–®': "Sh",
	'–©': "Sch",
	'–™': "",
	'–´': "Y",
	'–¨': "",
	'–≠': "E",
	'–Æ': "Yu",
	'–Ø': "Ya",
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
func transliterate(s string) string {
	var result strings.Builder
	for _, r := range s {
		if lat, ok := cyrToLat[r]; ok {
			result.WriteString(lat)
		} else {
			result.WriteRune(r) // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ
		}
	}
	return result.String()
}

func removeSpaces(s string) string {
	return strings.ReplaceAll(s, " ", "")
}
